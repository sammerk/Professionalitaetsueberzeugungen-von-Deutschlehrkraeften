{
  "hash": "82ca7985fb948f947c0d5e82d5a10f95",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Regressionen für Forschungsfrage 1\"\n---\n\n\n\n\n## Import scientific usefiles\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(brms)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'brms' was built under R version 4.4.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: Rcpp\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'Rcpp' was built under R version 4.4.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading 'brms' package (version 2.22.0). Useful instructions\ncan be found by typing help('brms'). A more detailed introduction\nto the package is available through vignette('brms_overview').\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'brms'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:stats':\n\n    ar\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(haven)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n## Gespeicherte Embeddings importieren\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ndata <- read_sav(\"../_data/data_suf.sav\") %>% \n  mutate(across(starts_with(\"PUe\"), function(x) ifelse(x %in% c(-1, -9), NA, x)),\n         spezifität = factor(ifelse(spezifität == 1, \"Fachdidaktik\", \"Global\")),\n         PID = CASE)\n\ndata_groberta <- \n  read_csv(\"../_data/data_groberta_embeddings.csv\") %>% \n  # spezifität joinen\n  full_join(data %>% select(PID, spezifität))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 14704 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): item, apriori_faktor, aposteriori_faktor\ndbl (2): PID, similarity\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nJoining with `by = join_by(PID)`\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\ndata_openai <- \n  read_csv(\"../_data/data_openai_embeddings.csv\") %>% \n  # spezifität joinen\n  full_join(data %>% select(PID, spezifität))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 14704 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): item, apriori_faktor, aposteriori_faktor, spezifität\ndbl (2): PID, similarity\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nJoining with `by = join_by(PID, spezifität)`\n```\n\n\n:::\n:::\n\n\n\n## Prädiktion der Ähnlichkeit mit Dummies\n### Ger\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| label: regressionen groberta\n#| eval: false\n\nreg_groberta01 <- \n  brm(bf(similarity ~ apriori_faktor + (1|PID),\n         phi ~ apriori_faktor + (1|PID)),\n      data = data_groberta %>% sample_n(2000),\n      cores = 4,\n      iter = 6000,\n      family = Beta())\n\nreg_groberta02 <- \n  brm(bf(similarity ~ apriori_faktor + (1 + apriori_faktor|PID),\n         phi ~ apriori_faktor + (1 + apriori_faktor|PID)),\n      data = data_groberta %>% sample_n(2000),\n      cores = 4,\n      iter = 6000,\n      family = Beta())\n\nloo_compare(\n  add_criterion(reg_groberta01, \"loo\"), \n  add_criterion(reg_groberta02, \"loo\")\n  )\n```\n:::\n\n\n\n\n::: {#lst-reg01}\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| label: random intercept models FF1\n\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| label: regressionen openai\n#| eval: false\n\nreg_openai02 <- \n  brm(bf(similarity ~ apriori_faktor + (1 + apriori_faktor|PID),\n         phi ~ apriori_faktor + (1 + apriori_faktor|PID)),\n      data = data_openai %>% sample_n(2000),\n      cores = 4,\n      iter = 6000,\n      family = Beta())\n\nplot(reg_groberta01)\npp_check(reg_groberta01)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}